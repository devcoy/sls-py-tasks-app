AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sls-app-tasks

  Sample SAM Template for sls-app-tasks using Python

# ...................................................................................................
# ...................................................................................................
#   GLOBAL CONFIG
# ...................................................................................................
# ...................................................................................................
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10
    MemorySize: 128
    Tracing: Active
  Api:
    TracingEnabled: true

# ...................................................................................................
# ...................................................................................................
#   PARAMETERS
# ...................................................................................................
# ...................................................................................................
Parameters:
  StageName:
    Type: String
    Default: Dev
    Description: Stage name for the API

# ...................................................................................................
# ...................................................................................................
#   RESOURCES
# ...................................................................................................
# ...................................................................................................
Resources:
  # .................................................................................................
  # .................................................................................................
  #   1.Tasks
  # .................................................................................................
  # .................................................................................................
  # .................................................................................................
  # .................................................................................................
  #   1.1 DynamoDB Tasks Table (is optional)
  # .................................................................................................
  # .................................................................................................
  TasksDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'TasksTable'
      AttributeDefinitions:
        - AttributeName: tasksId
          AttributeType: S
      KeySchema:
        - AttributeName: tasksId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      #ProvisionedThroughput:
      #ReadCapacityUnits: 1
      #WriteCapacityUnits: 1
  # .................................................................................................
  # .................................................................................................
  #   1.2 Api Gateway for Tasks Lambda functions (is optional)
  # .................................................................................................
  # .................................................................................................
  TasksApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      EndpointConfiguration:
        Type: REGIONAL
      Description: 'API Gateway for Tasks functions'
  # .................................................................................................
  # .................................................................................................
  #   1.3.1 Create a Tasks Function
  # .................................................................................................
  # .................................................................................................
  CreateTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/app/tasks/create/
      Handler: app.lambda_handler
      Architectures:
        - arm64
      Runtime: python3.11
      Environment:
        Variables:
          REGION: !Sub '${AWS::Region}'
          TABLE_NAME: !Ref TasksDynamoDBTable
      Events:
        CreateTasksApi:
          Type: Api
          Properties:
            RestApiId: !Ref TasksApi
            Path: /tasks
            Method: post
  # .................................................................................................
  # .................................................................................................
  #   1.3.2 Get Tasks Function (All or by Id)
  # .................................................................................................
  # .................................................................................................
  GetTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/app/tasks/get/
      Handler: app.lambda_handler
      Architectures:
        - arm64
      Runtime: python3.11
      Environment:
        Variables:
          REGION: !Sub '${AWS::Region}'
          TABLE_NAME: !Ref TasksDynamoDBTable
      Events:
        GetTasksApi:
          Type: Api
          Properties:
            RestApiId: !Ref TasksApi
            Path: /tasks
            Method: get
  # .................................................................................................
  # .................................................................................................
  #   1.3.3 Update a Tasks Function
  # .................................................................................................
  # .................................................................................................
  UpdateTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/app/tasks/update/
      Handler: app.lambda_handler
      Architectures:
        - arm64
      Runtime: python3.11
      Environment:
        Variables:
          REGION: !Sub '${AWS::Region}'
          TABLE_NAME: !Ref TasksDynamoDBTable
      Events:
        GetTasksApi:
          Type: Api
          Properties:
            RestApiId: !Ref TasksApi
            Path: /tasks
            Method: put
  # .................................................................................................
  # .................................................................................................
  #   1.3.4 Delete a Tasks Function
  # .................................................................................................
  # .................................................................................................
  DeleteTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/app/tasks/delete/
      Handler: app.lambda_handler
      Architectures:
        - arm64
      Runtime: python3.11
      Environment:
        Variables:
          REGION: !Sub '${AWS::Region}'
          TABLE_NAME: !Ref TasksDynamoDBTable
      Events:
        GetTasksApi:
          Type: Api
          Properties:
            RestApiId: !Ref TasksApi
            Path: /tasks
            Method: delete

# ...................................................................................................
# ...................................................................................................
#   OUTPUTS
# ...................................................................................................
# ...................................................................................................
Outputs:
  TasksApiUrl:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${TasksApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/tasks"
